import streamlit as st
import re
from database import create_user, authenticate_user

def is_valid_email(email):
    """Email c√≠m valid√°l√°sa"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def is_valid_username(username):
    """Felhaszn√°l√≥n√©v valid√°l√°sa"""
    if len(username) < 3:
        return False, "A felhaszn√°l√≥n√©v legal√°bb 3 karakter hossz√∫ legyen!"
    if len(username) > 20:
        return False, "A felhaszn√°l√≥n√©v maximum 20 karakter lehet!"
    if not re.match(r'^[a-zA-Z0-9_]+$', username):
        return False, "A felhaszn√°l√≥n√©v csak bet≈±ket, sz√°mokat √©s al√°h√∫z√°st tartalmazhat!"
    return True, ""

def is_valid_password(password):
    """Jelsz√≥ valid√°l√°sa"""
    if len(password) < 6:
        return False, "A jelsz√≥ legal√°bb 6 karakter hossz√∫ legyen!"
    if len(password) > 50:
        return False, "A jelsz√≥ maximum 50 karakter lehet!"
    return True, ""

def login_page():
    """Bejelentkez√©si oldal"""
    st.subheader("üîê Bejelentkez√©s")
    
    with st.form("login_form"):
        username = st.text_input("üë§ Felhaszn√°l√≥n√©v", placeholder="Add meg a felhaszn√°l√≥neved")
        password = st.text_input("üîí Jelsz√≥", type="password", placeholder="Add meg a jelszavad")
        
        submit_button = st.form_submit_button("üö™ Bejelentkez√©s", use_container_width=True)
        
        if submit_button:
            if not username or not password:
                st.error("‚ùå Minden mez≈ët ki kell t√∂lteni!")
                return
            
            # Hiteles√≠t√©s
            success, user_data = authenticate_user(username, password)
            
            if success:
                # Session state be√°ll√≠t√°sa
                st.session_state.logged_in = True
                st.session_state.user_id = user_data['id']
                st.session_state.username = user_data['username']
                st.session_state.email = user_data['email']
                
                st.success(f"‚úÖ Sikeres bejelentkez√©s! √údv√∂z√∂l {username}!")
                st.rerun()
            else:
                st.error("‚ùå Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥!")

def register_page():
    """Regisztr√°ci√≥s oldal"""
    st.subheader("üìù Regisztr√°ci√≥")
    
    with st.form("register_form"):
        username = st.text_input("üë§ Felhaszn√°l√≥n√©v", placeholder="V√°lassz egy egyedi felhaszn√°l√≥nevet")
        email = st.text_input("üìß Email c√≠m", placeholder="add@email.com")
        password = st.text_input("üîí Jelsz√≥", type="password", placeholder="Legal√°bb 6 karakter")
        password_confirm = st.text_input("üîí Jelsz√≥ meger≈ës√≠t√©se", type="password", placeholder="Jelsz√≥ √∫jra")
        
        # Felhaszn√°l√°si felt√©telek
        terms_accepted = st.checkbox("‚úÖ Elfogadom a felhaszn√°l√°si felt√©teleket √©s az adatv√©delmi szab√°lyzatot")
        
        submit_button = st.form_submit_button("üìù Regisztr√°ci√≥", use_container_width=True)
        
        if submit_button:
            # Valid√°ci√≥
            errors = []
            
            if not username or not email or not password or not password_confirm:
                errors.append("‚ùå Minden mez≈ët ki kell t√∂lteni!")
            
            if not terms_accepted:
                errors.append("‚ùå El kell fogadnod a felhaszn√°l√°si felt√©teleket!")
            
            # Felhaszn√°l√≥n√©v valid√°l√°s
            username_valid, username_error = is_valid_username(username)
            if not username_valid:
                errors.append(f"‚ùå {username_error}")
            
            # Email valid√°l√°s
            if email and not is_valid_email(email):
                errors.append("‚ùå √ârv√©nytelen email c√≠m form√°tum!")
            
            # Jelsz√≥ valid√°l√°s
            password_valid, password_error = is_valid_password(password)
            if not password_valid:
                errors.append(f"‚ùå {password_error}")
            
            # Jelsz√≥ egyez√©s
            if password != password_confirm:
                errors.append("‚ùå A jelszavak nem egyeznek!")
            
            # Ha van hiba, megjelen√≠j√ºk
            if errors:
                for error in errors:
                    st.error(error)
                return
            
            # Regisztr√°ci√≥
            success, message = create_user(username, email, password)
            
            if success:
                st.success(f"‚úÖ {message}")
                st.info("üéâ Most m√°r bejelentkezhetsz!")
                
                # Automatikus bejelentkez√©s
                auth_success, user_data = authenticate_user(username, password)
                if auth_success:
                    st.session_state.logged_in = True
                    st.session_state.user_id = user_data['id']
                    st.session_state.username = user_data['username']
                    st.session_state.email = user_data['email']
                    st.rerun()
            else:
                st.error(f"‚ùå {message}")

def logout_user():
    """Felhaszn√°l√≥ kijelentkeztet√©se"""
    st.session_state.logged_in = False
    st.session_state.user_id = None
    st.session_state.username = None
    st.session_state.email = None
    
    # T√∂r√∂lj√ºk az √∂sszes session state-et
    for key in list(st.session_state.keys()):
        if key not in ['logged_in', 'user_id', 'username', 'email']:
            del st.session_state[key]

def require_login():
    """Bejelentkez√©s ellen≈ërz√©se (decorator-szer≈± funkci√≥)"""
    if not st.session_state.get('logged_in', False):
        st.warning("‚ö†Ô∏è Ehhez a funkci√≥hoz be kell jelentkezned!")
        st.stop()
        return False
    return True

def get_current_user():
    """Aktu√°lis felhaszn√°l√≥ adatainak lek√©r√©se"""
    if st.session_state.get('logged_in', False):
        return {
            'id': st.session_state.user_id,
            'username': st.session_state.username,
            'email': st.session_state.email
        }
    return None

# Hasznos wrapper f√ºggv√©ny az oldalakhoz
def with_auth(page_function):
    """Wrapper f√ºggv√©ny, ami ellen≈ërzi a bejelentkez√©st"""
    def wrapper(*args, **kwargs):
        if require_login():
            return page_function(*args, **kwargs)
    return wrapper

# Felhaszn√°l√°si felt√©telek (egyszer≈± verzi√≥)
def show_terms_modal():
    """Felhaszn√°l√°si felt√©telek modal"""
    if st.button("üìã Felhaszn√°l√°si felt√©telek"):
        with st.expander("üìã Felhaszn√°l√°si felt√©telek √©s Adatv√©delmi szab√°lyzat", expanded=True):
            st.markdown("""
            ## Felhaszn√°l√°si felt√©telek
            
            ### 1. √Åltal√°nos rendelkez√©sek
            - A platform k√°rtyagy≈±jt≈ëk k√∂z√∂tti csere √©s elad√°s megk√∂nny√≠t√©s√©re szolg√°l
            - A felhaszn√°l√≥k felel≈ësek a megadott inform√°ci√≥k pontoss√°g√°√©rt
            - Tilos b√°rmilyen k√°ros, s√©rt≈ë vagy illeg√°lis tartalom k√∂zz√©t√©tele
            
            ### 2. Felel≈ëss√©g
            - A platform nem v√°llal felel≈ëss√©get a felhaszn√°l√≥k k√∂z√∂tti tranzakci√≥k√©rt
            - A cser√©k √©s elad√°sok a felhaszn√°l√≥k saj√°t felel≈ëss√©g√©re t√∂rt√©nnek
            - Aj√°nlott √≥vatoss√°g √©s megfelel≈ë ellen≈ërz√©s minden tranzakci√≥ el≈ëtt
            
            ### 3. Adatv√©delem
            - Az adatokat kiz√°r√≥lag a platform m≈±k√∂dtet√©s√©hez haszn√°ljuk fel
            - Nem adjuk √°t harmadik f√©lnek szem√©lyes adatokat
            - A jelszavak titkos√≠tva t√°rol√≥dnak
            
            ### 4. Viselked√©si szab√°lyok
            - Tiszteletteljes kommunik√°ci√≥ elv√°rva
            - Spam √©s k√©retlen √ºzenetek tiltva
            - Hamis inform√°ci√≥k megad√°sa tiltva
            
            Friss√≠tve: 2024. augusztus
            """)
            
            if st.button("‚úÖ Elfogadom", key="accept_terms"):
                st.success("Felt√©telek elfogadva!")
                return True
    return False